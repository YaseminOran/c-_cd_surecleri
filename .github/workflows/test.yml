name: 🧪 Hızlı Test Workflow

# Tüm branch'lerde hızlı testleri çalıştır
on:
  push:
    branches: [ main, develop, feature/* ]
  
  pull_request:
    types: [ opened, synchronize, reopened ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 🚀 Hızlı Testler (Feature branch'ler için)
  quick-tests:
    name: ⚡ Hızlı Testler
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Minimal Bağımlılıkları Yükle
      run: |
        pip install --upgrade pip
        pip install pytest flask requests
    
    - name: 🧪 Temel Testleri Çalıştır
      run: |
        # Sadece kritik testleri çalıştır
        python -m pytest tests/test_model.py::TestSimpleModel::test_model_predict_with_value -v
        python -m pytest tests/test_utils.py::TestInputValidation::test_validate_input_valid_data -v
    
    - name: 🔍 Syntax Check
      run: |
        python -m py_compile src/*.py
        python -m py_compile tests/*.py

  # 📝 Code Review Helper
  code-review:
    name: 📝 Code Review Yardımcısı
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Tam history için
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Code Analysis Tools Yükle
      run: |
        pip install flake8 black isort
    
    - name: 🎨 Code Style Kontrolü
      run: |
        echo "🎨 Code style kontrolleri..."
        
        # Black formatting check
        black --check --diff src/ tests/ || {
          echo "❌ Code formatting hatası bulundu!"
          echo "💡 Çözüm: black src/ tests/"
          exit 1
        }
        
        # Import sorting check
        isort --check-only --diff src/ tests/ || {
          echo "❌ Import sorting hatası bulundu!"
          echo "💡 Çözüm: isort src/ tests/"
          exit 1
        }
        
        echo "✅ Code style kontrolleri başarılı!"
    
    - name: 🔍 Changed Files Analysis
      run: |
        echo "🔍 Değişen dosyalar analiz ediliyor..."
        
        # PR'da değişen dosyaları bul
        git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E '\.(py)$' || {
          echo "ℹ️ Python dosyası değişikliği yok"
          exit 0
        }
        
        # Değişen Python dosyalarını analiz et
        changed_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E '\.(py)$')
        
        echo "📝 Değişen Python dosyaları:"
        echo "$changed_files"
        
        # Her dosya için basit metrik toplama
        for file in $changed_files; do
          if [[ -f "$file" ]]; then
            echo "📊 $file:"
            echo "  - Satır sayısı: $(wc -l < $file)"
            echo "  - Fonksiyon sayısı: $(grep -c '^def ' $file || echo 0)"
            echo "  - Class sayısı: $(grep -c '^class ' $file || echo 0)"
          fi
        done
    
    - name: 🧪 Test Coverage Analizi (Sadece değişen dosyalar)
      run: |
        echo "🧪 Değişen dosyalar için test coverage..."
        
        # Bağımlılıkları yükle
        pip install pytest pytest-cov
        pip install -r config/requirements.txt
        
        # Sadece değişen src dosyaları için coverage
        changed_src_files=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep '^src/.*\.py$' || true)
        
        if [[ -n "$changed_src_files" ]]; then
          echo "📊 Coverage analizi yapılıyor:"
          for file in $changed_src_files; do
            if [[ -f "$file" ]]; then
              module_name=$(echo $file | sed 's|src/||' | sed 's|\.py||' | sed 's|/|.|g')
              echo "  🔍 $module_name"
            fi
          done
          
          # Test çalıştır
          python -m pytest tests/ --cov=src/ --cov-report=term-missing
        else
          echo "ℹ️ Src dosyası değişikliği yok"
        fi

  # 🔒 Security Scan (PR için hafif)
  security-check:
    name: 🔒 Güvenlik Kontrolü
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🛡️ Security Scan
      run: |
        # Basit security kontrolleri
        echo "🔍 Security kontrolleri..."
        
        # Hardcoded secrets kontrolü
        if grep -r -E '(password|secret|key|token)\s*=\s*["\'][^"\']{8,}["\']' src/ tests/ 2>/dev/null; then
          echo "❌ Hardcoded secret bulundu!"
          echo "⚠️  Secrets'ları environment variable olarak kullanın"
          exit 1
        fi
        
        # Dangerous imports kontrolü
        if grep -r 'import os' src/ | grep -E 'os\.(system|popen|exec)' 2>/dev/null; then
          echo "⚠️ Potentially dangerous os calls bulundu"
        fi
        
        echo "✅ Security kontrolleri tamamlandı"

  # 📊 PR Summary
  pr-summary:
    name: 📊 PR Özeti
    runs-on: ubuntu-latest
    needs: [quick-tests, code-review, security-check]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: 📊 PR Durumu Özeti
      run: |
        echo "📊 Pull Request Özeti"
        echo "==================="
        echo "🏷️ PR: ${{ github.event.pull_request.title }}"
        echo "👤 Author: ${{ github.event.pull_request.user.login }}"
        echo "🌿 Branch: ${{ github.head_ref }}"
        echo "🎯 Target: ${{ github.base_ref }}"
        echo ""
        echo "📋 Test Sonuçları:"
        echo "  ⚡ Hızlı Testler: ${{ needs.quick-tests.result }}"
        echo "  📝 Code Review: ${{ needs.code-review.result }}"
        echo "  🔒 Security Check: ${{ needs.security-check.result }}"
        echo ""
        
        # Genel durum
        if [[ "${{ needs.quick-tests.result }}" == "success" && \
              "${{ needs.code-review.result }}" == "success" && \
              "${{ needs.security-check.result }}" == "success" ]]; then
          echo "✅ PR merge için hazır!"
          echo "💡 Next: Full CI pipeline main branch'e merge sonrası çalışacak"
        else
          echo "❌ PR'da düzeltilmesi gereken sorunlar var"
          echo "🔧 Lütfen failed check'leri gözden geçirin"
        fi
        
        # PR comment için data hazırla (gerçek projede GitHub API kullanılır)
        echo "comment_body=PR Status: ${{ needs.quick-tests.result == 'success' && needs.code-review.result == 'success' && needs.security-check.result == 'success' && '✅ Ready for merge' || '❌ Needs fixes' }}" >> $GITHUB_OUTPUT

  # 🎯 Branch Protection Feedback
  branch-protection:
    name: 🛡️ Branch Protection
    runs-on: ubuntu-latest
    needs: [quick-tests, code-review, security-check]
    if: always()
    
    steps:
    - name: 🛡️ Branch Protection Status
      run: |
        # Branch protection için gerekli kontroller
        echo "🛡️ Branch Protection Kontrolleri"
        
        all_passed=true
        
        if [[ "${{ needs.quick-tests.result }}" != "success" ]]; then
          echo "❌ Quick tests failed"
          all_passed=false
        fi
        
        if [[ "${{ needs.code-review.result }}" != "success" ]]; then
          echo "❌ Code review checks failed"
          all_passed=false
        fi
        
        if [[ "${{ needs.security-check.result }}" != "success" ]]; then
          echo "❌ Security checks failed"
          all_passed=false
        fi
        
        if [[ "$all_passed" == "true" ]]; then
          echo "✅ Tüm required checks başarılı - Branch merge edilebilir"
          exit 0
        else
          echo "❌ Branch merge edilemez - Required checks başarısız"
          exit 1
        fi