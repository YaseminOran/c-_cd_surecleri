name: 🚀 Sürekli Dağıtım (CD)

# Bu workflow ne zaman çalışacak?
on:
  # Main branch'e başarılı merge sonrası
  push:
    branches: [ main ]
  
  # CI workflow'u başarılı olduktan sonra
  workflow_run:
    workflows: ["🧪 Sürekli Entegrasyon (CI)"]
    branches: [ main ]
    types: [ completed ]
  
  # Manuel deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version Tag'
        required: false
        default: 'latest'

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cicd-demo
  PYTHON_VERSION: '3.11'

jobs:
  # 0️⃣ Ön Kontroller
  pre-deployment-checks:
    name: 🔍 Deployment Kontrolleri
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      deployment_env: ${{ steps.check.outputs.deployment_env }}
      version_tag: ${{ steps.check.outputs.version_tag }}
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🔍 Deployment Koşullarını Kontrol Et
      id: check
      run: |
        echo "🔍 Deployment kontrolleri yapılıyor..."
        
        # Manuel deployment ise
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "deployment_env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "version_tag=${{ inputs.version || 'latest' }}" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Manuel deployment onaylandı"
        else
          echo "deployment_env=staging" >> $GITHUB_OUTPUT
          echo "version_tag=latest" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Otomatik deployment onaylandı"
        fi

  # 1️⃣ Docker Image Build ve Push
  build-and-push:
    name: 🏗️ Build & Push
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🔧 Docker Buildx Kur
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Container Registry'ye Login
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Metadata Hazırla
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.pre-deployment-checks.outputs.version_tag }}
    
    - name: 🏗️ Docker Image Build ve Push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📝 Build Bilgileri
      run: |
        echo "✅ Docker image başarıyla build edildi!"
        echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}"
        echo "🔍 Digest: ${{ steps.build.outputs.digest }}"

  # 2️⃣ Staging Deployment
  deploy-staging:
    name: 🚀 Staging Deploy
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, build-and-push]
    if: needs.pre-deployment-checks.outputs.deployment_env == 'staging' || needs.pre-deployment-checks.outputs.deployment_env == 'production'
    
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🚀 Staging'e Deploy
      run: |
        echo "🚀 Staging ortamına deployment başlıyor..."
        echo "🏷️ Image: ${{ needs.build-and-push.outputs.image_tag }}"
        
        # Gerçek deployment komutları burada olacak
        # Örnek: kubectl, docker-compose, terraform, vs.
        
        # Simüle edilen deployment
        echo "📦 Container'ı çalıştırıyor..."
        docker run -d --name staging-app \
          -p 5000:5000 \
          -e ENVIRONMENT=staging \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
        
        sleep 10
        echo "✅ Staging deployment tamamlandı!"
    
    - name: 🔍 Staging Health Check
      run: |
        echo "🔍 Staging health check yapılıyor..."
        
        # Health check endpoint'ini kontrol et
        curl -f http://localhost:5000/health || {
          echo "❌ Health check başarısız!"
          exit 1
        }
        
        echo "✅ Staging health check başarılı!"
    
    - name: 🧪 Smoke Tests
      run: |
        echo "🧪 Staging smoke tests çalışıyor..."
        
        # Basit smoke testleri
        python -c "
        import requests
        import json
        
        base_url = 'http://localhost:5000'
        
        # Test 1: Health check
        response = requests.get(f'{base_url}/health')
        assert response.status_code == 200
        print('✅ Health check OK')
        
        # Test 2: Prediction endpoint
        test_data = {'value': 50}
        response = requests.post(f'{base_url}/predict', json=test_data)
        assert response.status_code == 200
        assert 'prediction' in response.json()
        print('✅ Prediction endpoint OK')
        
        print('🎉 Tüm smoke testler başarılı!')
        "

  # 3️⃣ Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🐍 Python Kur
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Test Bağımlılıklarını Yükle
      run: |
        pip install requests pytest
    
    - name: 🔗 End-to-End Tests
      run: |
        echo "🔗 Integration testleri çalışıyor..."
        
        # Kapsamlı integration testleri
        python -c "
        import requests
        import time
        import json
        
        base_url = 'http://localhost:5000'
        
        def test_api_workflow():
            print('🧪 API workflow test ediliyor...')
            
            # Test senaryosu: Tam bir kullanıcı akışı
            scenarios = [
                {'value': 10, 'expected_category': 'low'},
                {'value': 50, 'expected_category': 'medium'},
                {'value': 90, 'expected_category': 'high'}
            ]
            
            for i, scenario in enumerate(scenarios, 1):
                print(f'  Test {i}: Value {scenario[\"value\"]}')
                
                response = requests.post(f'{base_url}/predict', json=scenario)
                assert response.status_code == 200
                
                data = response.json()
                assert data['status'] == 'success'
                assert data['category'] == scenario['expected_category']
                print(f'    ✅ Kategori: {data[\"category\"]}')
            
            print('✅ API workflow testleri başarılı!')
        
        def test_performance():
            print('⚡ Performance testleri...')
            
            times = []
            for i in range(10):
                start = time.time()
                response = requests.get(f'{base_url}/health')
                end = time.time()
                times.append(end - start)
                assert response.status_code == 200
            
            avg_time = sum(times) / len(times)
            print(f'    Ortalama response: {avg_time:.3f}s')
            assert avg_time < 0.1
            
            print('✅ Performance testleri başarılı!')
        
        test_api_workflow()
        test_performance()
        print('🎉 Tüm integration testler başarılı!')
        "

  # 4️⃣ Production Approval
  production-approval:
    name: 🔐 Production Onay
    runs-on: ubuntu-latest
    needs: [integration-tests, pre-deployment-checks]
    if: needs.pre-deployment-checks.outputs.deployment_env == 'production' || (github.ref == 'refs/heads/main' && needs.integration-tests.result == 'success')
    
    environment:
      name: production-approval
    
    steps:
    - name: 🔐 Production Onayı Bekleniyor
      run: |
        echo "🔐 Production deployment için manuel onay bekleniyor..."
        echo "✅ Staging testleri başarılı"
        echo "✅ Integration testleri başarılı"
        echo "🚀 Production'a deploy etmeye hazır!"

  # 5️⃣ Production Deployment
  deploy-production:
    name: 🌍 Production Deploy
    runs-on: ubuntu-latest
    needs: [production-approval, build-and-push]
    if: success()
    
    environment:
      name: production
      url: https://api.example.com
    
    steps:
    - name: 📥 Kodu İndir
      uses: actions/checkout@v4
    
    - name: 🌍 Production'a Deploy
      run: |
        echo "🌍 Production deployment başlıyor..."
        echo "🏷️ Image: ${{ needs.build-and-push.outputs.image_tag }}"
        
        # Blue-Green deployment simülasyonu
        echo "💙 Blue-Green deployment stratejisi kullanılıyor..."
        
        # Yeni version'ı green slot'a deploy et
        echo "🟢 Green slot'a yeni version deploy ediliyor..."
        docker run -d --name production-green \
          -p 5001:5000 \
          -e ENVIRONMENT=production \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest || true
        
        sleep 15
        
        # Green slot health check
        echo "🔍 Green slot health check..."
        curl -f http://localhost:5001/health || {
          echo "❌ Green slot başarısız!"
          exit 1
        }
        
        # Traffic switch (simüle edilmiş)
        echo "🔄 Traffic green slot'a yönlendiriliyor..."
        echo "✅ Production deployment tamamlandı!"
    
    - name: 🔍 Production Verification
      run: |
        echo "🔍 Production verification..."
        
        # Production endpoint'lerini test et
        python -c "
        import requests
        
        # Production health check
        response = requests.get('http://localhost:5001/health')
        assert response.status_code == 200
        
        data = response.json()
        assert data['status'] == 'healthy'
        
        print('✅ Production verification başarılı!')
        "

  # 6️⃣ Post-Deployment
  post-deployment:
    name: 📊 Deployment Sonrası
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
    - name: 📊 Deployment Raporu
      run: |
        echo "📊 Deployment raporu oluşturuluyor..."
        
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ Production deployment başarılı!"
          echo "🌍 API URL: https://api.example.com"
          echo "📈 Monitoring: https://monitoring.example.com"
          
          # Slack bildirimi (simüle edilmiş)
          echo "📢 Slack'e başarı bildirimi gönderiliyor..."
          # curl -X POST $SLACK_WEBHOOK_URL -d '{"text":"🚀 Production deployment başarılı!"}'
          
        else
          echo "❌ Production deployment başarısız!"
          echo "🔄 Rollback prosedürü başlatılmalı"
          
          # Alert gönder (simüle edilmiş)
          echo "🚨 Alert sistemi bilgilendiriliyor..."
          # curl -X POST $ALERT_WEBHOOK_URL -d '{"text":"❌ Production deployment başarısız!"}'
        fi
    
    - name: 🏷️ Release Tag Oluştur
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🏷️ Release tag oluşturuluyor..."
        
        # Git tag oluştur
        TAG_NAME="v$(date +'%Y.%m.%d')-$(echo $GITHUB_SHA | cut -c1-7)"
        echo "Tag: $TAG_NAME"
        
        # Gerçek uygulamada:
        # git tag $TAG_NAME
        # git push origin $TAG_NAME
    
    - name: 📋 Deployment Özeti
      run: |
        echo "📋 Deployment Özeti"
        echo "=================="
        echo "🏷️ Version: ${{ needs.pre-deployment-checks.outputs.version_tag }}"
        echo "🌍 Environment: ${{ needs.pre-deployment-checks.outputs.deployment_env }}"
        echo "📅 Tarih: $(date)"
        echo "👤 Deployer: ${{ github.actor }}"
        echo "🔗 Commit: ${{ github.sha }}"
        echo "📊 Status: ${{ needs.deploy-production.result }}"